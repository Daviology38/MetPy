name: Nightly Checks

on:
  schedule:
  # Runs at 09Z (3am MDT)
    - cron: "0 9 * * *"

  # Allow a manual run
  workflow_dispatch:

jobs:
  Tests:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
    outputs:
      log_available: ${{ steps.tests.outputs.LOG_AVAILABLE }}

    steps:
    # We check out only a limited depth and then pull tags to save time
    - name: Checkout source
      uses: actions/checkout@v2.4.0
      with:
        fetch-depth: 100

    - name: Get tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}

    # This uses pip to find the right cache dir and then sets up caching for it
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"

    - name: Setup caching
      uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: pip-tests-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('ci/*') }}
        restore-keys: |
          pip-tests-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('ci/*') }}
          pip-tests-${{ runner.os }}-${{ matrix.python-version }}-
          pip-tests-${{ runner.os }}-
          pip-tests-

    - name: Assemble test requirements
      run: |
        cat ci/extra_requirements.txt >> ci/test_requirements.txt
        echo git+git://github.com/hgrecco/pint@master#egg=pint >> ci/test_requirements.txt
        echo git+git://github.com/pydata/xarray@main#egg=xarray >> ci/test_requirements.txt

    - name: Get cached compiled libraries
      id: cache-libraries
      uses: actions/cache@v2.1.6
      with:
        path: ~/local
        key: build-${{ runner.os }}-0

    - name: Build compiled libraries
      if: steps.cache-libraries.outputs.cache-hit != 'true'
      run: |
        mkdir proj-build
        curl https://download.osgeo.org/proj/proj-8.1.1.tar.gz | tar xzf - --strip-components=1 -C proj-build
        pushd proj-build
        mkdir build
        cd build
        cmake .. -DCMAKE_INSTALL_PREFIX=~/local -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release \
          -DENABLE_IPO=ON -DENABLE_CURL=OFF -DBUILD_CCT:BOOL=OFF -DBUILD_CS2CS:BOOL=OFF -DBUILD_GEOD:BOOL=OFF \
          -DBUILD_GIE:BOOL=OFF -DBUILD_GMOCK:BOOL=OFF -DBUILD_PROJINFO:BOOL=OFF -DBUILD_PROJSYNC:BOOL=OFF -DBUILD_TESTING:BOOL=OFF
        cmake --build . -j6
        cmake --install .
        popd

    - name: Set up paths to libraries
      run: |
        echo "CPATH=$CPATH:$HOME/local/include" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$LIBRARY_PATH:$HOME/local/lib" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/local/lib" >> $GITHUB_ENV
        echo "$HOME/local/bin" >> $GITHUB_PATH

    # This installs the stuff needed to build and install Shapely and CartoPy from source.
    - name: Install dependencies
      run: |
        sudo apt-get install libgeos-dev
        python -m pip install --upgrade pip setuptools
        python -m pip install --no-binary :all: shapely
        python -m pip install -r ci/test_requirements.txt -c ci/Prerelease

    - name: Download Cartopy Maps
      run: ci/download_cartopy_maps.py

    - name: Install
      run: python -m pip install -c ci/Prerelease .

    - name: Run tests
      id: tests
      run: |
        set -o pipefail
        export TEST_DATA_DIR=$GITHUB_WORKSPACE/staticdata
        python -m pytest --mpl -W error::metpy.deprecation.MetpyDeprecationWarning tests/ |& tee tests-${{ matrix.python-version }}.log || (
            echo '::set-output name=LOG_AVAILABLE::true' && false
        )

    - name: Upload test log
      if: ${{ always() && steps.tests.outputs.LOG_AVAILABLE  == 'true' }}
      uses: actions/upload-artifact@v2
      with:
        name: log-nightly-tests-${{ matrix.python-version }}
        path: tests-${{ matrix.python-version }}.log
        retention-days: 5

    - name: Upload test images
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: pypi-${{ matrix.python-version }}-nightly-images
        path: test_output/
        retention-days: 5

  Docs:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
    outputs:
      log_available: ${{ steps.build.outputs.LOG_AVAILABLE }}

    steps:
    # We check out only a limited depth and then pull tags to save time
    - name: Checkout source
      uses: actions/checkout@v2.4.0
      with:
        fetch-depth: 100

    - name: Get tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}

    # This uses pip to find the right cache dir and then sets up caching for it
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"

    - name: Setup pip cache
      uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: pip-docs-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('ci/*') }}
        restore-keys: |
          pip-docs-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('ci/*') }}
          pip-docs-${{ runner.os }}-${{ matrix.python-version }}-
          pip-docs-${{ runner.os }}-
          pip-docs-

    - name: Assemble doc requirements
      run: |
        cat ci/extra_requirements.txt >> ci/doc_requirements.txt
        echo git+git://github.com/hgrecco/pint@master#egg=pint >> ci/doc_requirements.txt
        echo git+git://github.com/pydata/xarray@main#egg=xarray >> ci/doc_requirements.txt

    - name: Get cached compiled libraries
      id: cache-libraries
      uses: actions/cache@v2.1.6
      with:
        path: ~/local
        key: build-${{ runner.os }}-0

    - name: Build compiled libraries
      if: steps.cache-libraries.outputs.cache-hit != 'true'
      run: |
        mkdir proj-build
        curl https://download.osgeo.org/proj/proj-8.1.1.tar.gz | tar xzf - --strip-components=1 -C proj-build
        pushd proj-build
        mkdir build
        cd build
        cmake .. -DCMAKE_INSTALL_PREFIX=~/local -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release \
          -DENABLE_IPO=ON -DENABLE_CURL=OFF -DBUILD_CCT:BOOL=OFF -DBUILD_CS2CS:BOOL=OFF -DBUILD_GEOD:BOOL=OFF \
          -DBUILD_GIE:BOOL=OFF -DBUILD_GMOCK:BOOL=OFF -DBUILD_PROJINFO:BOOL=OFF -DBUILD_PROJSYNC:BOOL=OFF -DBUILD_TESTING:BOOL=OFF
        cmake --build . -j6
        cmake --install .
        popd

    - name: Set up paths to libraries
      run: |
        echo "CPATH=$CPATH:$HOME/local/include" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$LIBRARY_PATH:$HOME/local/lib" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/local/lib" >> $GITHUB_ENV
        echo "$HOME/local/bin" >> $GITHUB_PATH

    # This installs the stuff needed to build and install Shapely and CartoPy from source.
    - name: Install dependencies (PyPI)
      run: |
        sudo apt-get install libgeos-dev
        python -m pip install --upgrade pip setuptools
        python -m pip install --no-binary :all: shapely
        python -m pip install -r ci/doc_requirements.txt -c ci/Prerelease

    - name: Download Cartopy Maps
      run: ci/download_cartopy_maps.py

    - name: Install self
      run: python -m pip install -c ci/Prerelease .

    - name: Build docs
      id: build
      run: |
        set -o pipefail
        export TEST_DATA_DIR=$GITHUB_WORKSPACE/staticdata
        pushd docs
        make overridecheck html O=-W |& tee build-${{ matrix.python-version }}.log || (
            echo '::set-output name=LOG_AVAILABLE::true' && false
        )
        popd

    - name: Enable link checker
      # Running linkchecker separately so that we avoid problems with vendored LICENSE
      # files in the build directory
      if: always()
      run: |
        pushd docs
        find build/html/_static -name LICENSE.md -delete
        make linkcheck
        # Make the presence of the output file with content (which could have specific redirects)
        # fail the build
        [ ! -s build/linkchecker/output.txt ] || (echo '::set-output name=LOG_AVAILABLE::true' && false)
        [ -s build/linkchecker/output.txt ] && cp build/linkchecker/output.txt linkchecker.log
        popd

    - name: Upload build log
      if: ${{ always() && steps.build.outputs.LOG_AVAILABLE  == 'true' }}
      uses: actions/upload-artifact@v2
      with:
        name: log-nightly-docs-${{ matrix.python-version }}
        path: |
          docs/build-${{ matrix.python-version }}.log
          docs/linkchecker.log
        retention-days: 5

    - name: Upload docs as artifact
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.python-version }}-nightly-docs
        path: |
          docs/build/html
          !docs/_static/*.pdf
        retention-days: 5

  Report:
    name: Report
    needs: [Tests, Docs]
    if: always() && (needs.Tests.outputs.log_available == 'true' || needs.Docs.outputs.log_available == 'true')
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - name: Download logs
        uses: actions/download-artifact@v2
        with:
          path: /tmp/workspace/logs

      - name: Group logs
        run: cat /tmp/workspace/logs/log-*/*.log > logs.txt

      - name: Report failures
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const logs = fs.readFileSync('logs.txt', 'utf8');
            const title = "Nightly build is failing";
            const workflow_url = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = `The [Nightly workflow](${workflow_url}) is failing.\n\`\`\`${logs}\`\`\``;

            // See if we have an existing issue
            const items = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              creator: 'github-actions[bot]'
            });
            const existing = items.data.filter(i => i.title === title);

            params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body,
              title: title,
              labels: ['Type: Maintenance']
            };
            if (existing.length === 0) {
                console.log('Creating new issue.')
                github.rest.issues.create(params)
            } else {
                params.issue_number = existing[0].number;
                console.log(`Updating existing issue: ${params.issue_number}`)
                github.rest.issues.update(params)
            }
